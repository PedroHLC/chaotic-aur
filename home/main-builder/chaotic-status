#!/usr/bin/env bash

# Settings
NUM_DOWN=25
NUM_USERS=10
NUM_UPDT=15
IP_CENSOR='s/([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/\1.XXX.YYY.\4/g'
MIRROR_LOG="/home/paran0id/logs/nginx_access.log"

# Special me
if [[ ! -z "$CHAOTIC_SUPER" ]]; then
	NUM_DOWN=10000
	NUM_USERS=10000
	IP_CENSOR='s/-/-/g'
fi

# Code

TODAY="$(date --date='-1 month' +'%d\/%b')"
_LOG_CLEANER="/.* \\[${TODAY}\\//{y=1}y && !/^(::1|localhost|127\\.0\\.0\\.1)/{print \$1\" \"\$7}"
_LOG_CLEANER_HEAD="/.* \\[${TODAY}\\//{y=1}y && !/^(::1|localhost|127\\.0\\.0\\.1)/{print \$4; exit}"

cd /var/log/httpd

BIGBANG="$(ls ./access* | sort -r | xargs awk "${_LOG_CLEANER_HEAD}" | grep -Po '(?<=\[)([^\]])*')"
if [ -z "$BIGBANG" ]; then
	_LOG_CLEANER="!/^(::1|localhost|127\\.0\\.0\\.1)/{print \$1\" \"\$7}"
	_LOG_CLEANER_HEAD="!/^(::1|localhost|127\\.0\\.0\\.1)/{print \$4; exit}"
	BIGBANG="$(ls ./access* | sort -r | xargs awk "${_LOG_CLEANER_HEAD}" | grep -Po '(?<=\[)([^\]])*')"
fi

[ -z "$NOT_MAIN" ] && MAIN_ACCESS=$(ls ./access* | sort -r | xargs awk "$_LOG_CLEANER")
[ -z "$NOT_MIRROR" ] && MIRROR_ACCESS=$(sudo awk "$_LOG_CLEANER" "$MIRROR_LOG")

UNIQ_ACCESS=$(printf "%s\n%s" "$MAIN_ACCESS" "$MIRROR_ACCESS" |\
	sed 's/vk-winelib/vk-mingw/g' |\
	sort -u)

echo '<!DOCTYPE html><html><head><meta charset="UTF-8" /><title>Chaotic-AUR :: Ranks, Numbers and Packages</title><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"><link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous"></head><body style="font-family: sans-serif;"><div class="container">'
echo '<h1>Chaotic-AUR</h1><p>See <a href="index.html">homepage</a> for maintainer&#x27;s notes.</p><h2>Ranks, Numbers and Packages</h2>'

echo '<h3>About numbers source</h3><ul>'
echo '<li>Data aquired from main repo logs, between <code>'
ls ./access* | sort -r | xargs awk "${_LOG_CLEANER_HEAD}" | grep -Po '(?<=\[)([^\]])*'
echo '</code> and <code>'
tail -n 1 access_log | grep -Po '(?<=\[)([^\]])*'
echo '</code></li>' '<li>Data aquired from @BangL'"'"'s mirror logs, between <code>'
sudo awk "${_LOG_CLEANER_HEAD}" "$MIRROR_LOG" | grep -Po '(?<=\[)([^\]])*'
echo '</code> and <code>'
sudo tail -n 1 "$MIRROR_LOG" | grep -Po '(?<=\[)([^\]])*'
echo '</code></li>' '</ul>' '<hr/>'

#echo '<!-- MAIN REPO ' $(echo "$MAIN_ACCESS" | wc -l) ' || MIRROR ' $(echo "$MIRROR_ACCESS" | wc -l) ' -->' 

PKGS_IP_COUNT=$(
	echo "$UNIQ_ACCESS" |\
		grep -Po '.*(?<=\/chaotic-aur\/x86_64\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar(?:\.xz|\.zst))' |\
	sort -u |\
	awk '{print $2}' |\
	grep -Po '(?<=\/chaotic-aur\/x86_64\/)(.*)'
)

echo '<h3>Top ' $NUM_DOWN ' most downloaded (per unique users):</h3>'
echo '<div class="row"><div class="border bg-dark text-white col-lg-1">Users</div><div class="border bg-dark text-white col-lg">Package</div></div>'
echo "$UNIQ_ACCESS" |\
	grep -Po '.*(?<=\/chaotic-aur\/x86_64\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar(?:\.xz|\.zst))' |\
	sed 's/wine-tkg-.*-git/wine-tkg-*/g;s/linux-tkg-...-[^-]*/linux-tkg-*/g;s/linux..-tkg-.../linux-tkg-*/g' |\
	sort -u |\
	awk '{print $2}' |\
	grep -Po '(?<=\/chaotic-aur\/x86_64\/)(.*)' |\
	sort | uniq -c | sort -nr |\
	head -n $NUM_DOWN |\
	sed -r 's/([^\ ]*)\ ([^\ ]*)$/<div class="row"><div class="border bg-light col-lg-1">\1<\/div><div class="border bg-light col-lg"><code>\2<\/code><\/div><\/div>/g'
echo '* For TkG packages check <a href="#tkg">here</a>.<br/><hr/>'

echo '<h3>Top 10 users (per unique downloaded packages):</h3>'
echo '<div class="row"><div class="border bg-dark text-white col-lg-1">Packages</div><div class="border bg-dark text-white col-lg-2">IP</div><div class="border bg-dark text-white col-lg">Country</div></div>'
echo "$UNIQ_ACCESS" |\
	grep -Po '.*(?<=\/chaotic-aur\/x86_64\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar(?:\.xz|\.zst))' |\
	sort -u |\
	awk '!/:/{print $1}' |\
	sort | uniq -c | sort -nr |\
	head -n $NUM_USERS |\
	awk '{print "echo -n \""$0" \"; geoiplookup "$2"; "}' |\
	bash |\
	sed -r "$IP_CENSOR" |\
	sed 's/GeoIP[^:]*: .., //g' |\
	sed -r 's/^\ *([^\ ]*)\ ([^\ ]*)\ (.*)$/<div class="row"><div class="border bg-light col-lg-1">\1<\/div><div class="border bg-light col-lg-2"><code>\2<\/code><\/div><div class="border bg-light col-lg">\3<\/div><\/div>/g'
echo '<br/>(IPv4 only)'
echo '<code>Users total: '
echo "$UNIQ_ACCESS" |\
	grep 'chaotic-aur\.db\.sig' |\
	awk '{print $1}' |\
	sort -u | wc -l |\
	sed 's/$/<br>/' 
echo '</code><hr/>'

echo '<h3>Last 15 updates:</h3>'
echo '<ul>'
cd /srv/http/chaotic-aur/x86_64
find . -type f -name "*.pkg.tar.*.sig" \
	-printf "%TY%Tm%Td%TH%TM%TS %p\n" |\
	sort | tail -n $NUM_UPDT | awk '{print $2}' |\
	grep -Po '(?<=\.\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar\.(?:xz|zst)\.sig)' |\
	awk '{print "\t"$0}' | tac |\
	sed 's/$/<\/code><\/li>/;s/^/<li><code>/' 
echo '</ul><hr/>'
PKGS_TOTAL=$(wc -l < ../pkgs.txt)

echo '<h3>Packages:</h3>'
echo '<ul>' "<li>Total: <code>${PKGS_TOTAL}"
echo '</code></li><li>GIT/SVN/HG/BZR: <code>'
grep -Pe '-(git|svn|hg|bzr)-' ../pkgs.txt | wc -l
echo '</code></li></li>Failing (hourly): <code>'
echo $(expr $(ls -1 ../makepkglogs/*.log | wc -l) - 2)
echo '</code></li><li>Failing (daily): <code>'
echo $(expr $(ls -1 ../makepkglogs/_daily/*.log | wc -l) - 1)
echo '</code></li><li>Failing (TkG): <code>'
if [ "$(systemctl is-active build-sunset.service)" == 'active' ]; then
	echo 'Building now...'
else
	echo $(ls -1 ../makepkglogs/_daily/tkg/*.log 2>&- | wc -l)
fi
echo '</code></li><li>systemd-nspawn fu**ing us: '
grep -l 'scope already exists' ../makepkglogs/*.log | wc -l
echo '</code></li><li>wrongly terminated containers: '
grep -l 'Found an older chroot' ../makepkglogs/*.log | wc -l
echo '</code></li></ul>'

echo '<h4>Versions:</h4>'
echo '<div class="row"><div class="border bg-dark text-white col-lg-4">pkgname</div><div class="border bg-dark text-white col-lg">pkgver</div><div class="border bg-dark text-white col-lg-1">pkgrel</div></div>'
cat ../pkgs.txt |\
	sed -r 's/^(.*)-([^-]*)-([^-]*)\/$/<div class="row"><div class="border bg-light col-lg-4"><a href="https:\/\/archlinux.pkgs.org\/rolling\/chaotic-aur-x86_64\/\1-\2-\3-x86_64.pkg.tar.zst.html"><code>\1<\/code><\/a><\/div><div class="border bg-light col-lg"><code>\2<\/code><\/div><div class="border bg-light col-lg-1"><code>\3<\/code><\/div><\/div>/'

echo '<hr/>'

echo '<h3>Important status</h3>'
echo '<h4>Finite Resources</h4>'
_DEF_IFS=$IFS
IFS=$'\n'
_AVAIL=($(df --output=avail -h /tmp / /media/http2 /media/http1 | tail -n 4))
IFS=$_DEF_IFS
echo '<div class="row"><div class="border bg-dark text-white col-lg-1">Free</div><div class="border bg-dark text-white col-lg">Resource</div></div>'
echo "<div class=\"row\"><div class=\"border bg-light col-lg-1\">${_AVAIL[0]}</div><div class=\"border bg-light col-lg\">source cache (pkgsrc artifacts)</div></div>"
echo "<div class=\"row\"><div class=\"border bg-light col-lg-1\">${_AVAIL[0]}</div><div class=\"border bg-light col-lg\">pacman cache (dependencies packages)</div></div>"
echo "<div class=\"row\"><div class=\"border bg-light col-lg-1\">${_AVAIL[3]}</div><div class=\"border bg-light col-lg\">repo output (compiled packages and archive)</div></div>"
echo "<div class=\"row\"><div class=\"border bg-light col-lg-1\">${_AVAIL[1]}</div><div class=\"border bg-light col-lg\">system</div></div>"

echo '<hr/>'

echo '<h3 id="tkg">TkG most downloaded (per unique users):</h3>'
echo '<div class="row"><div class="border bg-dark text-white col-lg-1">Users</div><div class="border bg-dark text-white col-lg">Package</div></div>'
# TODO: Get file extension and (any) architecture for pkgs.org links
echo "$PKGS_IP_COUNT" |\
	grep -P '\-tkg(\-|$)' |\
	sed -r 's/linux(420|50|51|52)-tkg/linux-tkg/g;s/-faudio//g' |\
	sort | uniq -c | sort -nr |\
	sed -r 's/([^\ ]*)\ ([^\ ]*)$/<div class="row"><div class="border bg-light col-lg-1">\1<\/div><div class="border bg-light col-lg"><code>\2<\/code><\/div><\/div>/g'
echo '<br/>'

echo '</div></body></html>'
