#!/usr/bin/env bash

# Settings
NUM_DOWN=25
NUM_USERS=10
NUM_UPDT=15
IP_CENSOR='s/([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)/\1.XXX.YYY.\4/g'

# Special me
if [[ ! -z "$CHAOTIC_SUPER" ]]; then
	NUM_DOWN=10000
	NUM_USERS=10000
	IP_CENSOR='s/-/-/g'
fi

# Code

cd /var/log/httpd
[ -z "$NOT_MAIN" ] && MAIN_ACCESS=$(cat ./access* | awk '{print $1" "$7}' | awk '!/^(::1|localhost|127\.0\.0\.1)/')
MIRROR_LOG="/home/paran0id/logs/nginx_access.log"
[ -z "$NOT_MIRROR" ] && MIRROR_ACCESS=$(sudo cat "$MIRROR_LOG" | awk '{print $1" "$7}' | awk '!/^(::1|localhost|127\.0\.0\.1)/')

UNIQ_ACCESS=$(printf "%s\n%s" "$MAIN_ACCESS" "$MIRROR_ACCESS" | sed 's/vk-winelib/vk-mingw/g;s/esync/fsync/g' | sort -u)

echo '<!DOCTYPE html><html><head><meta charset="UTF-8" /><title>Chaotic-AUR :: Ranks, Numbers and Packages</title><meta name="viewport" content="width=device-width, initial-scale=1.0"></head><body style="font-family: sans-serif;">'
echo '<h1>Chaotic-AUR</h1><p>See <a href="index.html">homepage</a> for maintainer&#x27;s notes.</p><h2>Ranks, Numbers and Packages</h2>'

echo '<h3>About numbers source</h3><ul>'
echo '<li>Data aquired from main repo logs, between <code>'
find . -type f -name "access*" -printf "%TY%Tm%Td%TH%TM%TS %p\n" |\
	sort | head -n 1 | awk '{print $2}' |\
	xargs head -n 1 | grep -Po '(?<=\[)([^\]])*'
echo '</code> and <code>'
tail -n 1 access_log | grep -Po '(?<=\[)([^\]])*'
echo '</code></li>' '<li>Data aquired from @BangL'"'"'s mirror logs, between <code>'
sudo head -n 1 "$MIRROR_LOG" | grep -Po '(?<=\[)([^\]])*'
echo '</code> and <code>'
sudo tail -n 1 "$MIRROR_LOG" | grep -Po '(?<=\[)([^\]])*'
echo '</code></li>' '</ul>'

echo '<!-- MAIN REPO ' $(echo "$MAIN_ACCESS" | wc -l) ' || MIRROR ' $(echo "$MIRROR_ACCESS" | wc -l) ' -->' 

PKGS_IP_COUNT=$(
	echo "$UNIQ_ACCESS" |\
	grep -Po '.*(?<=\/chaotic-aur\/x86_64\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar\.xz)' |\
	sort -u |\
	awk '{print $2}' |\
	grep -Po '(?<=\/chaotic-aur\/x86_64\/)(.*)' |\
	sort | uniq -c | sort -nr
)

echo '<h3>Top 25 most downloaded (per unique users):</h3>'
echo '<table border="1"><tr><td>Users</td><td>Package</td></tr>'
echo "$PKGS_IP_COUNT" |\
	head -n $NUM_DOWN |\
	sed -r 's/([^\ ]*)\ ([^\ ]*)$/<tr><td>\1<\/td><td><code>\2<\/code><\/td><\/tr>/g'
echo '</table><br/>'

echo '<h3>Top 10 users (per unique downloaded packages):</h3>'
echo '<table border="1"><tr><td>Packages</td><td>IP</td><td>Country</td></tr>'
echo "$UNIQ_ACCESS" |\
	grep -Po '.*(?<=\/chaotic-aur\/x86_64\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar\.xz)' |\
	sort -u |\
	awk '{print $1}' |\
	sort | uniq -c | sort -nr |\
	head -n $NUM_USERS |\
	awk '{print "echo -n \""$0" \"; geoiplookup "$2"; "}' |\
	bash |\
	sed -r "$IP_CENSOR" |\
	sed 's/GeoIP[^:]*: .., //g' |\
	sed -r 's/^\ *([^\ ]*)\ ([^\ ]*)\ (.*)$/<tr><td>\1<\/td><td><code>\2<\/code><\/td><td>\3<\/td><\/tr>/g'
echo '</table><br/>'
echo '<code>Users total: '
echo "$UNIQ_ACCESS" |\
	grep 'chaotic-aur\.db\.sig' |\
	awk '{print $1}' |\
	sort -u | wc -l |\
	sed 's/$/<br>/' 
echo '</code><br/>'

echo '<h3>Last 15 updates:</h3>'
echo '<ul>'
cd /srv/http/chaotic-aur/x86_64
find . -type f -name "*.pkg.tar.xz" \
	-printf "%TY%Tm%Td%TH%TM%TS %p\n" |\
	sort | tail -n $NUM_UPDT | awk '{print $2}' |\
	grep -Po '(?<=\.\/)(.*)(?=(?:-(?:[^-]*)){3}\.pkg\.tar\.xz)' |\
	awk '{print "\t"$0}' | tac |\
	sed 's/$/<\/code><\/li>/;s/^/<li><code>/' 
echo '</ul>'
PKGS_TOTAL=$(wc -l < ../pkgs.txt)

echo '<h3>Packages:</h3>'
echo "<code>Total: ${PKGS_TOTAL}"
echo '</code><br/><code>GIT/SVN/HG/BZR: '
grep -Pe '-(git|svn|hg|bzr)-' ../pkgs.txt | wc -l
echo '</code><br/><code>Failing (hourly): '
echo $(expr $(ls -1 ../makepkglogs/*.log | wc -l) - 2)
echo '</code><br/><code>Failing (daily): '
echo $(expr $(ls -1 ../makepkglogs/_daily/*.log | wc -l) - 2)
echo '</code><br/><code>Failing (TkG): '
if [ "$(systemctl is-active build-sunset.service)" == 'active' ]; then
	echo 'Building now...'
else
	echo $(ls -1 ../makepkglogs/_daily/tkg/*.log 2>&- | wc -l)
fi
echo '</code><br/><code>systemd-nspawn fu**ing us: '
grep -l 'scope already exists' ../makepkglogs/*.log | wc -l
echo '</code><br/><code>wrongly terminated containers: '
grep -l 'Found an older chroot' ../makepkglogs/*.log | wc -l
echo '</code><br/>'

echo '<h4>Versions:</h4>'
echo '<table border="1"><tr><td>pkgname</td><td>pkgver</td><td>pkgrel</td></tr>'
cat ../pkgs.txt |\
	sed -r 's/^(.*)-([^-]*)-([^-]*)\/$/<tr><td><code>\1<\/code><\/td><td><code>\2<\/code><\/td><td><code>\3<\/code><\/td><\/tr>/'
echo '</table>'

echo '<h3>Important status</h3>'
echo '<h4>Finite Resources</h4>'
_DEF_IFS=$IFS
IFS=$'\n'
_AVAIL=($(df --output=avail -h /tmp / /media/http2 /media/http1 | tail -n 4))
IFS=$_DEF_IFS
echo '<table border="1"><tr><td>Resource</td><td>Free</td></tr>'
echo "<tr><td>source cache<br/>(repos, artifacts, etc)</td><td>${_AVAIL[0]}</td></tr>"
echo "<tr><td>pacman cache<br/>(dependencies binaries)</td><td>${_AVAIL[0]}</td></tr>"
echo "<tr><td>repo output<br/>(binaries)</td><td>${_AVAIL[3]}</td></tr>"
echo "<tr><td>repo archive<br/>(outdate binaries)</td><td>${_AVAIL[2]}</td></tr>"
echo "<tr><td>system</td><td>${_AVAIL[1]}</td></tr>"
echo '</table>'


echo '</body></html>'
