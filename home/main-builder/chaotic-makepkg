#!/usr/bin/env sh
WTMK='[chaotic-makepkg]'
NEWLINE=$'\n'
if [[ -z "$(echo "$@" | grep '\-p \./tmp')" ]]; then
	# Check if PKGBUILD is present
	if [ ! -e './PKGBUILD' ]; then
		echo "$WTMK You made it wrong pal!"
		exit -4
	fi

	# * Defaults
	BUILD_USER='main-builder'
	CHROOT='/tmp/chaotic-chroot'
	CHSRC="$HOME/chaotic-chroot"
	BASE="${CHAOTIC_BASE:-base-root}"
	BASE_PKGS='base base-devel'
	BASE_NUKE=0
	TARGET="$PWD"
	TARGET_NUKE=${TARGET_NUKE:-1}
	PKGCACHE_DIR="$CHROOT/pacman-cache"
	SRCCACHE_DIR="$CHROOT/source-cache"
	CCACHE_DIR="$CHROOT/ccache-cache"
	REPO_PKGDEST='/srv/http/chaotic-aur/x86_64'
	CHAOTIC_KEY='3056513887B78AEB'

	# Doesn't work with any user
	if [[ "$(whoami)" != "$BUILD_USER" ]]; then
		echo "$WTMK Oh, who are you?"
		exit -5
	fi

	# * PKG data
	# I can't run makepkg --printsrcinfo without the container
	# and can't create the container without the package name
	# so I'll assume this folder contains the package name :P
	_PKGNAME_HEAD="${PWD##*/}"
	SRCCACHE_DIR="$SRCCACHE_DIR/$_PKGNAME_HEAD"
	CCACHE_DIR="$CCACHE_DIR/$_PKGNAME_HEAD"
	
	# * Wait if someone is creting a lowdir
	while [[ -f "$CHROOT/$BASE.lock" ]]; do
		sleep 2
	done


	# * Create a new lowdir if none exists
	TIMED_BASE="$BASE"
	if [[ ! -e "$CHROOT/$BASE.latest"  ]]; then
		TIMED_BASE="$BASE.$(date +%Y%m%d%H%M%S)"
		BASE_RUN="sudo arch-chroot -u root $CHROOT/$TIMED_BASE"
		BASE_USR_RUN="sudo arch-chroot -u $BUILD_USER $CHROOT/$TIMED_BASE"
		
		# Create infra
		echo "$WTMK Bulding lowerdir..."
		echo $$ > "$CHROOT/$BASE.lock"
		mkdir -p "$CHROOT/$TIMED_BASE"
		pushd "$CHROOT"

		# Basic packages
		sudo pacstrap -C "$CHSRC/pacman.conf" "./$TIMED_BASE" $BASE_PKGS

		# Build settings
		sudo cp "$CHSRC/makepkg.conf" "./$TIMED_BASE/etc/makepkg.conf" 
		sudo cp "$CHSRC/pacman.conf" "./$TIMED_BASE/etc/pacman.conf" 
		sudo mkdir -p "./$TIMED_BASE/usr/local/bin/"
		sudo cp "$CHSRC/internal-makepkg" "./$TIMED_BASE/usr/local/bin/"
		sudo cp "$CHSRC/x11-wrapper" "./$TIMED_BASE/usr/local/bin/"

		# Minimum locale
		echo 'en_US.UTF-8 UTF-8' | sudo tee "./$TIMED_BASE/etc/locale.gen"
		echo 'LANG=en_US.UTF-8' | sudo tee "./$TIMED_BASE/etc/locale.conf"
		sudo ln -rsf "./$TIMED_BASE/usr/share/zoneinfo/America/Sao_Paulo" "./$TIMED_BASE/etc/localtime"
		$BASE_RUN locale-gen

		# Build User
		$BASE_RUN useradd -Uu $(id -u $BUILD_USER) -m -s /bin/bash $BUILD_USER
		echo "$BUILD_USER ALL=(ALL) NOPASSWD: ALL" | sudo tee -a "./$TIMED_BASE/etc/sudoers"
		
		$BASE_USR_RUN mkdir -p "/home/$BUILD_USER/"{pkgwork,.ccache,pkgdest,pkgsrc,makepkglogs,.gnupg}
		$BASE_USR_RUN chmod 700 "/home/$BUILD_USER/.gnupg"
		cp -ar "/home/$BUILD_USER/.gnupg"/{pubring.kbx,tofu.db,trustdb.gpg,crls.d} "./$TIMED_BASE/home/$BUILD_USER/.gnupg"
		cp -a "/home/$BUILD_USER/.gitconfig" "./$TIMED_BASE/home/$BUILD_USER/"

		# Finish
		ln -s "./$TIMED_BASE" "$BASE.latest"
		popd
		rm "$CHROOT/$BASE.lock"
	else
		pushd "$CHROOT"
		TIMED_BASE=$(readlink "$BASE.latest")
		popd
	fi

	# * CHROOT
	MECHA_NAME="${TARGET_MECHA:-pkg$(echo "$_PKGNAME_HEAD" | sha256sum | cut -c1-11)}"
	TARGET_UPPER="${TARGET_UPPER:-$MECHA_NAME}"
	TARGET_RUN="sudo systemd-nspawn -M $MECHA_NAME  -u $BUILD_USER --capability=CAP_IPC_LOCK,CAP_SYS_NICE -D $CHROOT/$TARGET_UPPER/root"
	TARGET_WIZARD="$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/wizard.sh"
	function target_run() {
		echo "$@" | tee -a "$TARGET_WIZARD"
	}

	# * CHROOT Upperdir
	if [[ ! -d "$CHROOT/$TARGET_UPPER/root/usr" ]]; then
		echo "$WTMK Building chroot"
		
		# Directories
		mkdir -p "$PKGCACHE_DIR" "$SRCCACHE_DIR" "$CCACHE_DIR" \
			"$CHROOT/$TARGET_UPPER/"{up,work,root,dest.{up,work}}
		pushd "$CHROOT/$TARGET_UPPER"

		# Register some debugging info
		echo "$_PKGNAME_HEAD" > debug.txt
		date +'%Y-%m-%d %H:%M:%S' >> debug.txt

		# Always use the same lowdir
		if [[ -e base ]]; then
			TIMED_BASE=$(cat base)
		else
			echo -n "$TIMED_BASE" > base
		fi
		
		LOWER="$CHROOT/$TIMED_BASE"
		_HOME="./root/home/$BUILD_USER"

		# Minimal mount
		sudo mount overlay -t overlay -olowerdir=$LOWER,upperdir=./up,workdir=./work ./root

		# Other mounts
		sudo mount --bind "$TARGET" "${_HOME}/pkgwork"
		sudo mount --bind "$CCACHE_DIR" "${_HOME}/.ccache"
		sudo mount --bind "$SRCCACHE_DIR" "${_HOME}/pkgsrc"
		sudo mount --bind "$PKGCACHE_DIR" "./root/var/cache/pacman/pkg"
		sudo mount overlay -t overlay -olowerdir=$REPO_PKGDEST,upperdir=./dest.up,workdir=./dest.work "${_HOME}/pkgdest"

		# Create wizard
		echo '#!/usr/bin/env bash' | tee "$TARGET_WIZARD"
		sudo chown $BUILD_USER:$BUILD_USER "$TARGET_WIZARD"
		sudo chmod 755 "$TARGET_WIZARD"
		target_run set -o errexit

		# Finish
		popd
	else
		echo "$WTMK Found an older chroot, please clean it: $TARGET_UPPER"
		exit 69
	fi

	# * When interference is required, apply!
	source '/interfere/generic_prepare'
	_INTERFERE="/interfere/${_PKGNAME_HEAD}"
	if [[ -d "${_INTERFERE}" ]]; then
		echo "$WTMK Found interfere path"
		[[ -f "${_INTERFERE}/prepare" ]] && \
			source "${_INTERFERE}/prepare"
		if [[ -f "${_INTERFERE}/PKGBUILD.prepend" ]]; then
			# The worst one, but KISS and easier to maintain
			_prepend="$(cat "${_INTERFERE}/PKGBUILD.prepend")"
			_pkgbuild="$(cat PKGBUILD)"
			echo "$_prepend" > PKGBUILD
			echo "$_pkgbuild" >> PKGBUILD
		fi
		[[ -f "${_INTERFERE}/PKGBUILD.append" ]] && \
			cat "${_INTERFERE}/PKGBUILD.append" >> PKGBUILD
	fi

	# * Sometimes we need to analize things
	if [[ "$TARGET_INTERACTIVE" == '1' ]]; then
		target_run reset
		target_run echo "When you want to build, run: exec internal-makepkg -s --noprogressbar $TARGET_ARGS $@"
		target_run exec /usr/bin/bash --login

	# * Sometimes X is stil required...
	elif [[ ! -z "$TARGET_USEX" ]]; then
		echo "$WTMK X was required, treating..."
		target_run sudo pacman -S --needed --noconfirm xorg-server-xvfb
		target_run exec xvfb-run -a -n 97 /usr/local/bin/internal-makepkg -s --noprogressbar $TARGET_ARGS $@

	# * Makepkg
	else
		target_run exec /usr/local/bin/internal-makepkg -s --noprogressbar $TARGET_ARGS $@
	fi
	
	# Spawn contaienr and do everything
	_build_failed=''
	echo "$WTMK Finally spawning it:"
	$TARGET_RUN "/home/$BUILD_USER/wizard.sh" || _build_failed="$?"

	# * Special options on failure
	[[ -n "$_build_failed" ]] && [[ -f "$_INTERFERE/on-failure.sh" ]] && source "$_INTERFERE/on-failure.sh"
	
	# * Deploy
	# Push artifacts to dest
	if [ -z "$CHAOTIC_DONT_PUBLISH" ] && [ -z "$_build_failed" ]; then
		sudo umount -Rv "$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/pkgdest"
		pushd "$CHROOT/$TARGET_UPPER/dest.up"
			for f in ./*; do
				gpg --detach-sign --use-agent -u "$CHAOTIC_KEY" --no-armor "$f"
			done
			mv ./* "$REPO_PKGDEST/"
		popd
	fi

	# * Nuke
	if [[ "$TARGET_NUKE" == '1' ]]; then
		echo "$WTMK Nuking..."
		sudo umount -Rv "$CHROOT/$TARGET_UPPER/root" && \
		sudo rm --one-file-system -rf "$CHROOT/$TARGET_UPPER" || \
		echo "$WTMK Unable to nuke!"
	else
		sudo umount -R "$CHROOT/$TARGET_UPPER/root"
	fi
	if [[ "$BASE_NUKE" == '1' ]]; then
		echo "$WTMK Nuking BASE..."
		sudo rm --one-file-system -rf "$CHROOT/$TIMED_BASE" || \
	echo "$WTMK Unable to nuke!"
	fi

	# Don't even know if this works...
	exit $_build_failed
else
	exec makepkg $@
fi
