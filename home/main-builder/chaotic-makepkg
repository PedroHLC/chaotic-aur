#!/usr/bin/env sh
WTMK='[chaotic-makepkg]'
NEWLINE=$'\n'
if [[ -z "$(echo "$@" | grep '\-p \./tmp')" ]]; then
	# Check if PKGBUILD is present
	if [ ! -e './PKGBUILD' ]; then
		echo "$WTMK You made it wrong pal!"
		exit -4
	fi

	# * Defaults
	BUILD_USER='main-builder'
	CHROOT='/tmp/chaotic-chroot'
	CHSRC="$HOME/chaotic-chroot"
	BASE='base-root'
	BASE_PKGS='base-devel'
	BASE_NUKE=0
	TARGET="$PWD"
	TARGET_NUKE=${TARGET_NUKE:-1}
	PKGCACHE_DIR="$CHROOT/pacman-cache"
	SRCCACHE_DIR="$CHROOT/source-cache"
	CCACHE_DIR="$CHROOT/ccache-cache"
	REPO_PKGDEST='/srv/http/chaotic-aur/x86_64'
	CHAOTIC_KEY='3056513887B78AEB'

	# Doesn't work with any user
	if [[ "$(whoami)" != "$BUILD_USER" ]]; then
		echo "$WTMK Oh, who are you?"
		exit -5
	fi

	# * PKG data
	# I can't run makepkg --printsrcinfo without the container
	# and can't create the container without the package name
	# so I'll assume this folder contains the package name :P
	_PKGNAME_HEAD="${PWD##*/}"
	SRCCACHE_DIR="$SRCCACHE_DIR/$_PKGNAME_HEAD"
	CCACHE_DIR="$CCACHE_DIR/$_PKGNAME_HEAD"
	
	# * Threats those who use sqlite-replication
	if [[ ! -z "$(echo "$_PKGNAME_HEAD" | grep -P '^dqlite(-git)?$')" ]]; then
		export BASE='dqlite-root'
		export BASE_PKGS="sqlite-replication ${BASE_PKGS}"
		export BASE_NUKE=1
	fi

	# * CHROOT Lowdir
	BASE_RUN="sudo arch-chroot -u root $CHROOT/$BASE"
	BASE_USR_RUN="sudo arch-chroot -u $BUILD_USER $CHROOT/$BASE"
	#BASE_RUN="sudo systemd-nspawn -M $BASE -u root -D $CHROOT/$BASE"
	if [[ ! -d "$CHROOT/$BASE" ]]; then
		# Create infra
		echo "$WTMK Bulding lowerdir..."
		mkdir -p "$CHROOT/$BASE"
		echo $$ > "$CHROOT/$BASE.lock"
		pushd "$CHROOT"

		# Basic packages
		sudo pacstrap -C "$CHSRC/pacman.conf" "./$BASE" $BASE_PKGS

		# Build settings
		sudo cp "$CHSRC/makepkg.conf" "./$BASE/etc/makepkg.conf" 
		sudo cp "$CHSRC/pacman.conf" "./$BASE/etc/pacman.conf" 
		sudo mkdir -p "./$BASE/usr/local/bin/"
		sudo cp "$CHSRC/internal-makepkg" "./$BASE/usr/local/bin/"
		sudo cp "$CHSRC/x11-wrapper" "./$BASE/usr/local/bin/"

		# Minimum locale
		echo 'en_US.UTF-8 UTF-8' | sudo tee "./$BASE/etc/locale.gen"
		echo 'LANG=en_US.UTF-8' | sudo tee "./$BASE/etc/locale.conf"
		sudo ln -rsf "./$BASE/usr/share/zoneinfo/America/Sao_Paulo" "./$BASE/etc/localtime"
		$BASE_RUN locale-gen

		# Build User
		$BASE_RUN useradd -u $(id -u $BUILD_USER) -m -G users -s /bin/bash $BUILD_USER
		echo "$BUILD_USER ALL=(ALL) NOPASSWD: ALL" | sudo tee -a "./$BASE/etc/sudoers"
		
		$BASE_USR_RUN mkdir -p "/home/$BUILD_USER/"{pkgwork,.ccache,pkgdest,pkgsrc,makepkglogs,.gnupg}
		$BASE_USR_RUN chmod 700 "/home/$BUILD_USER/.gnupg"
		cp -ar "/home/$BUILD_USER/.gnupg"/{pubring.kbx,tofu.db,trustdb.gpg,crls.d} "./$BASE/home/$BUILD_USER/.gnupg"
		cp -a "/home/$BUILD_USER/.gitconfig" "./$BASE/home/$BUILD_USER/"

		# Finish
		popd
		rm "$CHROOT/$BASE.lock"
	else
		while [[ -f "$CHROOT/$BASE.lock" ]] || [[ -f "$CHROOT/$BASE/var/lib/pacman/db.lck" ]]; do
			sleep 1
		done
	fi

	# * CHROOT
	MECHA_NAME="${TARGET_MECHA:-pkg$(echo "$_PKGNAME_HEAD" | sha256sum | cut -c1-11)}"
	TARGET_UPPER="${TARGET_UPPER:-$MECHA_NAME}"
	TARGET_RUN="sudo systemd-nspawn -M $MECHA_NAME  -u $BUILD_USER --capability=CAP_IPC_LOCK,CAP_SYS_NICE -D $CHROOT/$TARGET_UPPER/root"
	TARGET_WIZARD="$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/wizard.sh"
	function target_run() {
		echo "$@" | tee -a "$TARGET_WIZARD"
	}

	# * CHROOT Upperdir
	if [[ ! -d "$CHROOT/$TARGET_UPPER/root/usr" ]]; then
		echo "$WTMK Building chroot"
		mkdir -p "$PKGCACHE_DIR" "$SRCCACHE_DIR" "$CCACHE_DIR" \
			"$CHROOT/$TARGET_UPPER/"{up,work,root,dest.{up,work}}
		pushd "$CHROOT/$TARGET_UPPER"

		echo "$_PKGNAME_HEAD" > debug.txt
		date +'%Y-%m-%d %H:%M:%S' >> debug.txt
		
		LOWER="$CHROOT/$BASE"
		_HOME="./root/home/$BUILD_USER"

		# Minimal mount
		sudo mount overlay -t overlay -olowerdir=$LOWER,upperdir=./up,workdir=./work ./root

		# Other mounts
		sudo mount --bind "$TARGET" "${_HOME}/pkgwork"
		sudo mount --bind "$CCACHE_DIR" "${_HOME}/.ccache"
		sudo mount --bind "$SRCCACHE_DIR" "${_HOME}/pkgsrc"
		sudo mount --bind "$PKGCACHE_DIR" "./root/var/cache/pacman/pkg"
		sudo mount overlay -t overlay -olowerdir=$REPO_PKGDEST,upperdir=./dest.up,workdir=./dest.work "${_HOME}/pkgdest"

		# Create wizard
		echo '#!/usr/bin/env bash' | tee "$TARGET_WIZARD"
		sudo chown $BUILD_USER:$BUILD_USER "$TARGET_WIZARD"
		sudo chmod 755 "$TARGET_WIZARD"
		target_run set -o errexit

		# Finish
		popd
	else
		echo "$WTMK Found an older chroot, please clean it: $TARGET_UPPER"
		exit 69
	fi

	# * When interference is required, apply!
	source '/interfere/generic_prepare'
	_INTERFERE="/interfer/${_PKGNAME_HEAD}"
	if [[ -d "${_INTERFERE}" ]]; then
		[[ -f "${_INTERFERE}/prepare" ]] && \
			source "${_INTERFERE}/prepare"
		[[ -f "${_INTERFERE}/PKGBUILD.prepend" ]] && \
			echo "$(<"${_INTERFERE}/PKGBUILD.prepend")$(<PKGBUILD)" > PKGBUILD
		[[ -f "${_INTERFERE}/PKGBUILD.apend" ]] && \
			echo "$(<"${_INTERFERE}/PKGBUILD.apend")" >> PKGBUILD
	fi
	
	# * Sometimes X is stil required...
	if [[ ! -z "$TARGET_USEX" ]]; then
		echo "$WTMK X was required, treating..."
		target_run sudo pacman -S --needed --noconfirm xorg-server-xvfb
		target_run exec xvfb-run -a -n 97 /usr/local/bin/internal-makepkg -s --noprogressbar $TARGET_ARGS $@

	# * Makepkg
	else
		target_run exec /usr/local/bin/internal-makepkg -s --noprogressbar $TARGET_ARGS $@
	fi
	
	# Spawn contaienr and do everything
	_build_failed=''
	echo "$WTMK Finally spawning it:"
	$TARGET_RUN "/home/$BUILD_USER/wizard.sh" || _build_failed="$?"
	
	# * Deploy
	# Push artifacts to dest
	if [ -z "$CHAOTIC_DONT_PUBLISH" ] && [ -z "$_build_failed" ]; then
		sudo umount -Rv "$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/pkgdest"
		pushd "$CHROOT/$TARGET_UPPER/dest.up"
			for f in ./*; do
				gpg --detach-sign --use-agent -u "$CHAOTIC_KEY" --no-armor "$f"
			done
			mv ./* "$REPO_PKGDEST/"
		popd
	fi

	# * Nuke
	if [[ "$TARGET_NUKE" == '1' ]]; then
		echo "$WTMK Nuking..."
		sudo umount -Rv "$CHROOT/$TARGET_UPPER/root" && \
		sudo rm --one-file-system -rf "$CHROOT/$TARGET_UPPER" || \
		echo "$WTMK Unable to nuke!"
	else
		sudo umount -R "$CHROOT/$TARGET_UPPER/root"
	fi
	if [[ "$BASE_NUKE" == '1' ]]; then
		echo "$WTMK Nuking BASE..."
		sudo rm -rf "$CHROOT/$BASE" || \
	echo "$WTMK Unable to nuke!"
	fi

	# Don't even know if this works...
	exit $_build_failed
else
	exec makepkg $@
fi
