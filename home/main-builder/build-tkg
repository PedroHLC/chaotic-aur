#!/usr/bin/env bash
export TKGLOGS='/srv/http/chaotic-aur/makepkglogs/_daily/tkg'
mkdir -p "$TKGLOGS"

# CONFIG

# - Wine

# (staging vkd3d faudio)
_WINE_VARIATIONS=(
	'false false false'
	'false false true'	# faudio
	'false true false'	# vkd3d
	'false true true'	# vkd3d, faudio
	'true false false'	# staging
	'true false true'	# staging, faudio
	'true true false'	# staging, vkd3d
	'true true true'	# staging, vkd3d, faudio
)

# - Linux

# (version)
_LINUX_VERSIONS=(
	#'419'
	'51'
	'52'
	#'53-rc'
)
# (scheduler yield)
_LINUX_VARIATIONS=(
	'pds 0'
	'bmq 1'
)

#
# Change building settings to automate
#

# - Wine
wine_setup() {
	git checkout customization.cfg PKGBUILD

	local _USE_DXVKGI='true'
	if [ "$2" == 'true' ]; then
		_USE_DXVKGI='false'
	fi

	sed -i'' "
	s/_NUKR=\"[^\"]*\"/_NUKR=\"false\"/g
	s/_NOINITIALPROMPT=\"[^\"]*\"/_NOINITIALPROMPT=\"true\"/g
	s/_use_staging=\"[^\"]*\"/_use_staging=\"$1\"/g
	s/_use_vkd3d=\"[^\"]*\"/_use_vkd3d=\"$2\"/g
	s/_dxvk_dxgi=\"[^\"]*\"/_dxvk_dxgi=\"$_USE_DXVKGI\"/g
	s/_use_faudio=\"[^\"]*\"/_use_faudio=\"$3\"/g
	s/_user_patches_no_confirm=\"[^\"]*\"/_user_patches_no_confirm=\"true\"/g
	" customization.cfg

	local _SRCINFO=$(makepkg -o --noprepare --printsrcinfo)
	export _PKGNAME=$(echo "$_SRCINFO" | grep -Po '(?<=pkgname = )(.*)$')

	echo "[build-tkg] customization set to: ${_PKGNAME}"
}

# - Linux
kernel_setup() {
	git checkout customization.cfg PKGBUILD

	sed --debug -i'' "
	s/_NUKR=\"[^\"]*\"/_NUKR=\"false\"/g
	s/_OPTIPROFILE=\"[^\"]*\"/_OPTIPROFILE=\"1\"/g
	s/_modprobeddb=\"[^\"]*\"/_modprobeddb=\"false\"/g
	s/_menunconfig=\"[^\"]*\"/_menunconfig=\"false\"/g
	s/_cpusched=\"[^\"]*\"/_cpusched=\"$1\"/g
	s/_sched_yield_type=\"[^\"]*\"/_sched_yield_type=\"$2\"/g
	s/_ftracedisable=\"[^\"]*\"/_ftracedisable=\"true\"/g
	s/_numadisable=\"[^\"]*\"/_numadisable=\"false\"/g
	s/_tickless=\"[^\"]*\"/_tickless=\"2\"/g
	s/_voluntary_preempt=\"[^\"]*\"/_voluntary_preempt=\"true\"/g
	s/_acs_override=\"[^\"]*\"/_acs_override=\"true\"/g
	s/_ksm_uksm=\"[^\"]*\"/_ksm_uksm=\"true\"/g
	s/_bcachefs=\"[^\"]*\"/_bcachefs=\"true\"/g
	s/_bfqmq=\"[^\"]*\"/_bfqmq=\"true\"/g
	s/_zfsfix=\"[^\"]*\"/_zfsfix=\"true\"/g
	s/_processor_opt=\"[^\"]*\"/_processor_opt=\"generic\"/g
	s/_smt_nice=\"[^\"]*\"/_smt_nice=\"true\"/g
	s/_random_trust_cpu=\"[^\"]*\"/_random_trust_cpu=\"true\"/g
	s/_runqueue_sharing=\"[^\"]*\"/_runqueue_sharing=\"mc\"/g
	s/_timer_freq=\"[^\"]*\"/_timer_freq=\"750\"/g
	s/_user_patches=\"[^\"]*\"/_user_patches=\"false\"/g
	" customization.cfg

	echo '[build-tkg] applied kernel customization'

	export TARGET_EXTRAPKGS='ccache'
}

# - NVIDIA
nvidia_setup() {
	rm options

	sed --debug -i'' "
	s/read \-p \"What driver version do you want\?.*$/export CONDITION=$1/g
	s/read \-p \"Build the dkms package or the regular one\?.*$/export CONDITION=$2/g
	s/read /echo /g
	" PKGBUILD

	if [ "$2" == '1' ]; then
		export TARGET_EXTRAPKGS='linux-headers'
	else
		local _EXTRAPKGS="$(echo linux{,-lts,-zen,-clear,-rt,-mainline}-headers)"
		for VERSION in "${_LINUX_VERSIONS[@]}"
		do
			for VARIATION in "${_LINUX_VARIATIONS[@]}"
			do
				local _VAR=($VARIATION)
				_EXTRAPKGS+=" linux$VERSION-tkg-${_VAR[0]}"
				export TARGET_EXTRAPKGS=$_EXTRAPKGS
			done
		done
	fi
}

# - Mesa
mesa_setup() {
	git checkout customization.cfg PKGBUILD

	sed -i'' "
	s/^#?MESA_WHICH_LLVM=.*$/MESA_WHICH_LLVM=1/g
	s/_user_patches_no_confirm=\"[^\"]*\"/_user_patches_no_confirm=\"true\"/g
	" customization.cfg

	echo '[build-tkg] applied mesa customization'
	
	export TARGET_MECHA='mesatkg'
}


#
# Helpers
#
wine_makepkg() {
	export TARGET_UPPER='wine'
	export TARGET_NUKE=0
	export TARGET_EXTRAPKGS='ccache mingw-w64-gcc'
        ~/chaotic-makepkg \
		--noconfirm $@
	~/chaotic-add
}

#
# Clone TKG
#
cd /tmp || exit
git clone https://github.com/Tk-Glitch/PKGBUILDS.git TkG || exit 4
cd TkG

#
# Build
#

# - Wine
if [ -z "$TKG_NOWINE" ]; then
	cd wine-tkg-git || exit
	for VARIATION in "${_WINE_VARIATIONS[@]}"
	do
		git reset --hard HEAD
		git clean -dfx

		wine_setup $VARIATION
		rm -rf ./src

		wine_makepkg -sC 2>&1 | tee "$TKGLOGS/$_PKGNAME.log"

		sed -i'' "
		s/_EXTERNAL_INSTALL=\"[^\"]*\"/_EXTERNAL_INSTALL=\"true\"/g
		s/_EXTERNAL_INSTALL_TYPE=\"[^\"]*\"/_EXTERNAL_INSTALL_TYPE=\"opt\"/g
		" customization.cfg

		echo "[build-tkg] customization set to: ${_PKGNAME/%-git/-opt-git}"

		export _OPT_PKGNAME="${_PKGNAME/%-git/-opt-git}"
		ln -srf "src/${_PKGNAME}-32-build" "src/${_OPT_PKGNAME}-32-build"
		ln -srf "src/${_PKGNAME}-64-build" "src/${_OPT_PKGNAME}-64-build"

		wine_makepkg -Rc 2>&1 | tee "$TKGLOGS/$_OPT_PKGNAME.log"
	done

	git checkout customization.cfg PKGBUILD
	unset TARGET_UPPER TARGET_NUKE TARGET_EXTRAPKGS
	cd ..
fi

# - Linux
if [ -z "$TKG_NOLINUX" ]; then
	for VERSION in "${_LINUX_VERSIONS[@]}"
	do
		directory="linux${VERSION}-tkg"
		if [ -d $directory ]; then
			cd $directory || exit
			for VARIATION in "${_LINUX_VARIATIONS[@]}"
			do
				kernel_setup $VARIATION
				local _VAR=($VARIATION)
				~/chaotic-makepkg --noconfirm -C 2>&1 | tee "$TKGLOGS/linux${VERSION}-${_VAR[0]}.log"
				~/chaotic-add
				unset TARGET_EXTRAPKGS
			done
			cd ..
		else
			echo "No code for linux${VERSION} found."
		fi
	done
fi

# - NVIDIA
if [ -z "$TKG_NONV" ]; then
	cd nvidia-all || exit
	nvidia_setup '3' '1'
	~/chaotic-makepkg --noconfirm -C 2>&1 | tee "$TKGLOGS/nvidia-all.log"
	~/chaotic-add
	unset TARGET_EXTRAPKGS
	cd ..
fi

# - vulkan-headers
if [ -z "$TKG_NOVK" ]; then
	cd vulkan-headers-git || exit
	~/chaotic-makepkg --noconfirm -C 2>&1 | tee "$TKGLOGS/vulkan-headers-git.log"
	~/chaotic-add
	unset TARGET_EXTRAPKGS
	cd ..
fi

# - mesa
if [ -z "$TKG_NOMESA" ]; then
	cd mesa-git || exit
	mesa_setup
	~/chaotic-makepkg --noconfirm -C 2>&1 | tee "$TKGLOGS/mesa-git.log"
	~/chaotic-add
	unset TARGET_MECHA
	cd ..
fi

#
# Clean
#
echo '[build-tkg] Nuking everything'
cd /tmp || exit
sudo rm -rf TkG


# - Logs
cd "$TKGLOGS"
~/chaotic-clean-logs
rm *-opt-git.log
