#!/usr/bin/env sh
ALIEN_NAME="${ALIEN_NAME:-aarch64}"
#ALIEN_BOOTSTRAP="${ALIEN_BOOTSTRAP:-/usr/local/bin/arch-bootstrap -a aarch64 -d pacman-cache }"
ALIEN_BIND="${ALIEN_BIND:-/usr/bin/qemu-aarch64-static}"
ALIEN_OUT="${ALIEN_OUT:-aur/aarch64}"

ALPINE_MIRROR="${ALPINE_MIRROR:-http://dl-cdn.alpinelinux.org/alpine/edge}"

WTMK='[chaotic-makealien]'
NEWLINE=$'\n'
if [[ -z "$(echo "$@" | grep '\-p \./tmp')" ]]; then
	# Check if PKGBUILD is present
	if [[ ! -e './PKGBUILD' && ! -e './APKBUILD' ]]; then
		echo "$WTMK You made it wrong pal!"
		exit -4
	fi

	# * Defaults
	IS_IT_ARCH=${IS_IT_ARCH:-1}
	IS_IT_ALPINE=${IS_IT_ALPINE:-0}
	BUILD_USER='main-builder'
	CHROOT="/tmp/chaotic-${ALIEN_NAME}"
	CHSRC="$HOME/chaotic-${ALIEN_NAME}"
	BASE='base-root'
	BASE_PKGS="${BASE_PKGS:-base-devel}"
	BASE_NUKE=0
	TARGET="$PWD"
	TARGET_NUKE=${TARGET_NUKE:-1}
	PKGCACHE_DIR="$CHROOT/pacman-cache"
	SRCCACHE_DIR="$CHROOT/source-cache"
	REPO_PKGDEST="/srv/http/chaotic-${ALIEN_OUT}"
	CHAOTIC_KEY='3056513887B78AEB'

	# Doesn't work with any user
	if [[ "$(whoami)" != "$BUILD_USER" ]]; then
		echo "$WTMK Oh, who are you?"
		exit -5
	fi

	# * PKG data
	# I can't run makepkg --printsrcinfo without the container
	# and can't create the container without the package name
	# so I'll assume this folder contains the package name :P
	_PKGNAME_HEAD="${PWD##*/}"
	SRCCACHE_DIR="$SRCCACHE_DIR/$_PKGNAME_HEAD"
	
	# * CHROOT Lowdir
	BASE_RUN="sudo arch-chroot -u root $CHROOT/$BASE"
	BASE_USR_RUN="sudo arch-chroot -u $BUILD_USER $CHROOT/$BASE"
	#[[ "${ALIEN_BIND}" != 'none' ]] && BASE_RUN="${BASE_RUN} ${ALIEN_BIND}"
	if [[ ! -d "$CHROOT/$BASE" ]]; then
		# Create infra
		echo "$WTMK Bulding lowerdir..."
		mkdir -p "$PKGCACHE_DIR" "$CHROOT/$BASE"
		echo $$ > "$CHROOT/$BASE.lock"
		pushd "$CHROOT"

		# Basic packages
		sudo $ALIEN_PACSTRAP "./$BASE" $BASE_PKGS
		
		if [ "$IS_IT_ARCH" == '1' ]; then
			$BASE_RUN pacman-key --init
			$BASE_RUN pacman-key --populate

			# Build settings
			sudo cp "$CHSRC/makepkg.conf" "./$BASE/etc/makepkg.conf" 
			sudo cp "$CHSRC/pacman.conf" "./$BASE/etc/pacman.conf" 
			sudo mkdir -p "./$BASE/usr/local/bin/"
			sudo cp "$CHSRC/internal-makepkg" "./$BASE/usr/local/bin/"

			# Minimum locale
			echo 'en_US.UTF-8 UTF-8' | sudo tee "./$BASE/etc/locale.gen"
			echo 'LANG=en_US.UTF-8' | sudo tee "./$BASE/etc/locale.conf"
			sudo ln -rsf "./$BASE/usr/share/zoneinfo/America/Sao_Paulo" "./$BASE/etc/localtime"
			$BASE_RUN locale-gen

			# Build User
			$BASE_RUN useradd -u $(id -u $BUILD_USER) -m -G users -s /bin/bash $BUILD_USER
			echo "$BUILD_USER ALL=(ALL) NOPASSWD: ALL" | sudo tee -a "./$BASE/etc/sudoers"
		
			$BASE_USR_RUN mkdir -p "/home/$BUILD_USER/"{pkgwork,.ccache,pkgdest,pkgsrc,makepkglogs,.gnupg}
			$BASE_USR_RUN chmod 700 "/home/$BUILD_USER/.gnupg"
			cp -ar "/home/$BUILD_USER/.gnupg"/{pubring.kbx,tofu.db,trustdb.gpg,crls.d} "./$BASE/home/$BUILD_USER/.gnupg"

			# Finish
			$BASE_RUN pacman -Scc --noconfirm
		fi

		if [ "$IS_IT_ALPINE" == '1' ]; then
			$BASE_RUN /usr/sbin/adduser -D -u $(id -u $BUILD_USER) -h /home/$BUILD_USER -G abuild -s /bin/ash $BUILD_USER
			$BASE_USR_RUN /bin/mkdir -p "/home/$BUILD_USER/"{pkgwork,pkgdest,pkgsrc,makepkglogs}
			echo "$BUILD_USER ALL=(ALL) NOPASSWD: ALL" | sudo tee -a "./$BASE/etc/sudoers"
			cp -ar "/home/$BUILD_USER/.abuild" "./$BASE/home/$BUILD_USER/.abuild"
			echo -e "${ALPINE_MIRROR}/main\n${ALPINE_MIRROR}/community" | sudo tee "./$BASE/etc/apk/repositories"
			echo "https://lonewolf.pedrohlc.com/chaotic-aur/alpine/main-builder" | sudo tee -a "./$BASE/etc/apk/repositories"
			sudo cp "/etc/resolv.conf" "./$BASE/etc/"
			sudo cp "/home/$BUILD_USER/.abuild"/*.pub "./$BASE/etc/apk/keys/"
			$BASE_RUN /sbin/apk update
		fi

		popd
		rm "$CHROOT/$BASE.lock"
	else
		while [[ -f "$CHROOT/$BASE.lock" ]] || [[ -f "$CHROOT/$BASE/var/lib/pacman/db.lck" ]]; do
			sleep 1
		done
	fi

	# * CHROOT
	MECHA_NAME="pkg$(echo "$_PKGNAME_HEAD" | sha256sum | cut -c1-11)"
	TARGET_UPPER="${TARGET_UPPER:-$MECHA_NAME}"
	TARGET_RUN="sudo systemd-nspawn -M $MECHA_NAME  -u $BUILD_USER --capability=CAP_IPC_LOCK -D $CHROOT/$TARGET_UPPER/root"
	[[ "${ALIEN_BIND}" != 'none' ]] && TARGET_RUN="${TARGET_RUN} --bind ${ALIEN_BIND}"
	[[ ! -z "$DONT_USE_SYSTEMD" ]] && TARGET_RUN="sudo arch-chroot $CHROOT/$TARGET_UPPER/root /bin/su -l $BUILD_USER -c"
	TARGET_WIZARD="$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/wizard.sh"
	function target_run() {
		echo "$@" | tee -a "$TARGET_WIZARD"
	}

	# * CHROOT Upperdir
	if [[ ! -d "$CHROOT/$TARGET_UPPER/root/usr" ]]; then
		echo "$WTMK Building chroot"
		mkdir -p "$PKGCACHE_DIR" "$SRCCACHE_DIR" "$CHROOT/$TARGET_UPPER/"{up,work,root,dest.{up,work}}
		pushd "$CHROOT/$TARGET_UPPER"

		echo "$_PKGNAME_HEAD" > debug.txt
		date +'%Y-%m-%d %H:%M:%S' >> debug.txt
		
		LOWER="$CHROOT/$BASE"
		_HOME="./root/home/$BUILD_USER"

		# Minimal mount
		sudo mount overlay -t overlay -olowerdir=$LOWER,upperdir=./up,workdir=./work ./root

		# Other mounts
		sudo mount --bind "$TARGET" "${_HOME}/pkgwork"
		if [ "$IS_IT_ARCH" == '1' ]; then
			sudo mount --bind "$SRCCACHE_DIR" "${_HOME}/pkgsrc"
			sudo mount --bind "$PKGCACHE_DIR" "./root/var/cache/pacman/pkg"
		fi
		sudo mount overlay -t overlay -olowerdir=$REPO_PKGDEST,upperdir=./dest.up,workdir=./dest.work "${_HOME}/pkgdest" || echo "$WTMK Funny world isn't it?"

		# Create wizard
		if [ "$IS_IT_ALPINE" == '1' ]; then
			echo '#!/bin/ash' | tee "$TARGET_WIZARD"
		elif [ "$IS_IT_ARCH" == '1' ]; then
			echo '#!/usr/bin/env bash' | tee "$TARGET_WIZARD"
		else
			echo '#!/usr/bin/env sh' | tee "$TARGET_WIZARD"
		fi
		sudo chown $BUILD_USER:$BUILD_USER "$TARGET_WIZARD"
		sudo chmod 755 "$TARGET_WIZARD"

		# Finish
		popd
	else
		echo "$WTMK Found an older chroot, please clean it: $TARGET_UPPER"
		exit 69
	fi
	
	if [ "$IS_IT_ARCH" == '1' ]; then
		# * CHROOT Update
		target_run sudo pacman -Syu --noconfirm

		# * Treats VCs
		if [[ ! -z "$(echo "$_PKGNAME_HEAD" | grep -P '\-git$')" ]]; then
			target_run sudo pacman -S --needed --noconfirm git
		fi
		if [[ ! -z "$(echo "$_PKGNAME_HEAD" | grep -P '\-svn$')" ]]; then
			target_run sudo pacman -S --needed --noconfirm subversion
		fi
		if [[ ! -z "$(echo "$_PKGNAME_HEAD" | grep -P '\-bzr$')" ]]; then
			target_run sudo pacman -S --needed --noconfirm bzr
		fi
		if [[ ! -z "$(echo "$_PKGNAME_HEAD" | grep -P '\-hg$')" ]]; then
			target_run sudo pacman -S --needed --noconfirm mercurial
		fi

		# * User cases
		if [[ ! -z "$TARGET_REMPKGS" ]]; then
			target_run sudo pacman -Rdd --noconfirm $TARGET_REMPKGS
		fi
		if [[ ! -z "$TARGET_EXTRAPKGS" ]]; then
			target_run sudo pacman -S --needed --noconfirm $TARGET_EXTRAPKGS
		fi
		if [[ ! -z "$TARGET_ENV" ]]; then
			echo "$TARGET_ENV" | tee -a "$TARGET_WIZARD"
		fi

		# * Makepkg
		target_run /usr/local/bin/internal-makepkg -s $@
	fi

	if [ "$IS_IT_ALPINE" == '1' ]; then
		target_run cd "/home/$BUILD_USER/pkgwork"
		target_run /usr/bin/abuild -r -P "/home/$BUILD_USER/pkgdest" -s "/home/$BUILD_USER/pkgsrc" $@
	fi
	
	# Spawn contaienr and do everything
	echo "$WTMK Finally spawning it:"
	$TARGET_RUN "/home/$BUILD_USER/wizard.sh"
	RESULT="$?"
	
	# * Deploy
	# Push artifacts to dest
	sudo umount -Rv "$CHROOT/$TARGET_UPPER/root/home/$BUILD_USER/pkgdest"
	pushd "$CHROOT/$TARGET_UPPER/dest.up"
		if [ "$IS_IT_ARCH" == '1' ]; then
			for f in ./*; do
				gpg --detach-sign --use-agent -u "$CHAOTIC_KEY" --no-armor "$f"
			done
			mv ./* "$REPO_PKGDEST/"
		else
			cp -r ./* "$REPO_PKGDEST/"
		fi
	popd

	# * Nuke
	if [[ "$TARGET_NUKE" == '1' ]]; then
		echo "$WTMK Nuking..."
		sudo umount -Rv "$CHROOT/$TARGET_UPPER/root" && \
		sudo rm -rf "$CHROOT/$TARGET_UPPER" || \
		echo "$WTMK Unable to nuke!"
	else
		sudo umount -R "$CHROOT/$TARGET_UPPER/root"
	fi
	if [[ "$BASE_NUKE" == '1' ]]; then
		echo "$WTMK Nuking BASE..."
		sudo rm -rf "$CHROOT/$BASE" || \
		echo "$WTMK Unable to nuke!"
	fi

	# Don't even know if this works...
	exit $RESULT
else
	exec makepkg $@
fi
